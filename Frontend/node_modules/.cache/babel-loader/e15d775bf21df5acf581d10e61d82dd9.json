{"ast":null,"code":"import { CART_ITEM, PRODUCT_INFO_FAIL, PRODUCT_INFO_REQUEST, PRODUCT_INFO_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"./Actionconstants\";\nimport Axios from 'axios';\nexport const ListProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('http://localhost:5000/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (err) {\n    const error = err.message;\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error\n    });\n  }\n};\nexport const ProductScreenproducts = id => async dispatch => {\n  console.log(id);\n  dispatch({\n    type: PRODUCT_INFO_REQUEST\n  });\n\n  try {\n    const product = await Axios.get(`http://localhost:5000/api/products/${id}`);\n    console.log(product.data);\n    dispatch({\n      type: PRODUCT_INFO_SUCCESS,\n      payload: product.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_INFO_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message //message fetched from express server check server.js\n      : error.message\n    });\n  }\n};\nconst iniitialState = {\n  cart: {\n    cartitems: localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n  }\n};\nexport const AddCartItem = (productId, quantity) => async dispatch => {\n  const {\n    data\n  } = await Axios.get(`http://localhost:5000/api/products/${productId}`);\n  dispatch({\n    type: CART_ITEM,\n    payload: {\n      name: data.name,\n      price: data.price,\n      image: data.image,\n      countinstock: data.countInStock,\n      product: data.id,\n      quantity\n    }\n  });\n  localStorage.setItem('cartItems', JSON.stringify(iniitialState.cart.cartitems));\n};","map":{"version":3,"sources":["C:/react apps/amazon_frontend/Frontend/src/Store/Action.js"],"names":["CART_ITEM","PRODUCT_INFO_FAIL","PRODUCT_INFO_REQUEST","PRODUCT_INFO_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","Axios","ListProducts","dispatch","type","data","get","payload","err","error","message","ProductScreenproducts","id","console","log","product","response","iniitialState","cart","cartitems","localStorage","getItem","JSON","parse","AddCartItem","productId","quantity","name","price","image","countinstock","countInStock","setItem","stringify"],"mappings":"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","sourcesContent":["import { CART_ITEM, PRODUCT_INFO_FAIL, PRODUCT_INFO_REQUEST, PRODUCT_INFO_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"./Actionconstants\";\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\nexport const ListProducts=()=> async(dispatch)=>{\r\n   \r\n    dispatch({\r\n        type:PRODUCT_LIST_REQUEST\r\n    });\r\n    try{\r\n        const {data}=await Axios.get('http://localhost:5000/api/products');\r\n        dispatch({\r\n            type:PRODUCT_LIST_SUCCESS,payload:data\r\n        })\r\n    }\r\n    catch(err){\r\n        const error=err.message;\r\n        dispatch({\r\n            type:PRODUCT_LIST_FAIL,payload:error\r\n        })\r\n    \r\n    }\r\n}\r\n\r\nexport const ProductScreenproducts=(id)=> async(dispatch)=>{\r\n    console.log(id);\r\n    dispatch({\r\n        type:PRODUCT_INFO_REQUEST,\r\n    });\r\n    try{\r\n        const product= await Axios.get(`http://localhost:5000/api/products/${id}`);\r\n        console.log(product.data);\r\n        dispatch({\r\n            type:PRODUCT_INFO_SUCCESS,payload:product.data\r\n        })\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type:PRODUCT_INFO_FAIL,\r\n            payload:\r\n            error.response && error.response.data.message\r\n            ?error.response.data.message  //message fetched from express server check server.js\r\n            :error.message\r\n\r\n        }\r\n        )\r\n        \r\n    \r\n    }\r\n\r\n}\r\nconst iniitialState={\r\n    cart:{\r\n        cartitems:localStorage.getItem('cartItems')\r\n        ?\r\n        JSON.parse(localStorage.getItem('cartItems'))\r\n        :[],\r\n    }\r\n}\r\nexport const AddCartItem=(productId,quantity)=>async(dispatch)=>{\r\n    const {data}= await Axios.get(`http://localhost:5000/api/products/${productId}`);\r\n    dispatch({\r\n        type:CART_ITEM,\r\n        payload:{\r\n            name:data.name,\r\n            price:data.price,\r\n            image:data.image,\r\n            countinstock:data.countInStock,\r\n            product:data.id,\r\n            quantity,\r\n        }\r\n    })\r\n    localStorage.setItem('cartItems',JSON.stringify(iniitialState.cart.cartitems));\r\n}"]},"metadata":{},"sourceType":"module"}