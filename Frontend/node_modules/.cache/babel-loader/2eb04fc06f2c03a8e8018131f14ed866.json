{"ast":null,"code":"import { USER_SIGNIN_FAIL, USER_SIGNIN, USER_SIGNIN_SUCCESS, USER_SIGNIN_REQUEST } from \"./Actionconstants\";\nimport bcrypt from 'bcryptjs';\nconst initialstate = {\n  user: {},\n  message: '',\n  loading: false\n};\nexport const Signinreducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case USER_SIGNIN_REQUEST:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case USER_SIGNIN_SUCCESS:\n      {\n        const data = action.payload;\n        console.log(data); //  if(useremail){\n        //    const userpassword= bcrypt.compareSync(action.payload.password,useremail.password);\n        //    if(useremail && userpassword){\n\n        if (data) {\n          return { ...state,\n            user: data,\n            message: 'user found'\n          };\n        } // }\n        //    }\n        //bcrypt for decrypting backend password\n        //     else{\n        //     return{\n        //      ...state,\n        //         message:'user not found'\n        //     }\n        //  }\n\n      }\n\n    case USER_SIGNIN_FAIL:\n      return { ...state,\n        message: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n_c = Signinreducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signinreducer\");","map":{"version":3,"sources":["C:/react apps/amazon_frontend/Frontend/src/Store/Signinreducer.js"],"names":["USER_SIGNIN_FAIL","USER_SIGNIN","USER_SIGNIN_SUCCESS","USER_SIGNIN_REQUEST","bcrypt","initialstate","user","message","loading","Signinreducer","state","action","type","data","payload","console","log"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,EAAwCC,mBAAxC,EAA6DC,mBAA7D,QAAwF,mBAAxF;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,IAAI,EAAC,EADU;AAEfC,EAAAA,OAAO,EAAC,EAFO;AAGfC,EAAAA,OAAO,EAAC;AAHO,CAAnB;AAMA,OAAO,MAAMC,aAAa,GAAC,CAACC,KAAK,GAACL,YAAP,EAAoBM,MAApB,KAA6B;AACpD,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKT,mBAAL;AAAyB;AACrB,eAAM,EACF,GAAGO,KADD;AAEFF,UAAAA,OAAO,EAAC;AAFN,SAAN;AAKH;;AAED,SAAKN,mBAAL;AAAyB;AACrB,cAAMW,IAAI,GAACF,MAAM,CAACG,OAAlB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAFqB,CAMvB;AACE;AACA;;AACI,YAAGA,IAAH,EAAQ;AACJ,iBAAM,EACF,GAAGH,KADD;AAEFJ,YAAAA,IAAI,EAACO,IAFH;AAGFN,YAAAA,OAAO,EAAC;AAHN,WAAN;AAKH,SAfgB,CAiBlB;AACP;AAGI;AAGL;AACI;AACG;AACH;AACA;AAGD;;AACD;;AACD,SAAKP,gBAAL;AACI,aAAM,EACJ,GAAGU,KADC;AAEFH,QAAAA,OAAO,EAACI,MAAM,CAACG;AAFb,OAAN;;AAOJ;AACI,aAAOJ,KAAP;AApDR;AAuDH,CAxDM;KAAMD,a","sourcesContent":["import { USER_SIGNIN_FAIL, USER_SIGNIN, USER_SIGNIN_SUCCESS, USER_SIGNIN_REQUEST } from \"./Actionconstants\"\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst initialstate={\r\n    user:{},\r\n    message:'',\r\n    loading:false,\r\n}\r\n\r\nexport const Signinreducer=(state=initialstate,action)=>{\r\n    switch(action.type){\r\n\r\n        case USER_SIGNIN_REQUEST:{\r\n            return{\r\n                ...state,\r\n                loading:true\r\n\r\n            }\r\n        }\r\n\r\n        case USER_SIGNIN_SUCCESS:{\r\n            const data=action.payload;\r\n            console.log(data);\r\n            \r\n          \r\n         \r\n          //  if(useremail){\r\n            //    const userpassword= bcrypt.compareSync(action.payload.password,useremail.password);\r\n            //    if(useremail && userpassword){\r\n                if(data){\r\n                    return{\r\n                        ...state,\r\n                        user:data,\r\n                        message:'user found',\r\n                    }\r\n                }\r\n                 \r\n               // }\r\n        //    }\r\n\r\n            \r\n            //bcrypt for decrypting backend password\r\n      \r\n         \r\n       //     else{\r\n           //     return{\r\n              //      ...state,\r\n           //         message:'user not found'\r\n           //     }\r\n                \r\n                \r\n          //  }\r\n        }\r\n        case USER_SIGNIN_FAIL:\r\n            return{\r\n              ...state,\r\n                message:action.payload,\r\n\r\n            }\r\n\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}